name: 'Boemm Service Build Action'
description: 'Builds the Service jar using Maven Release Plugin'
inputs:
  github-token:
    description: "rw gh token for release-plugin. be carefull with permissions"
    required: true
    default: none
  java-version:
    description: 'Override java version. ex: 11'
    required: false
    default: '11'
  maven-args:
    description: 'override maven args. ex: -Darguments="-Dmaven.javadoc.skip=true"'
    required: false
    default: none
  maven-profile: 
    description: 'set maven profile, if needed. ex: -Pgithub-actions'
    required: false
    default: "-Pgithub-actions"
outputs:
  releasePluginCommit:
    description: Release plugin commit
    value: ${{ steps.getReleaseCommit.outputs.releasePluginCommit }}
  tag:
    description: Release plugin tag
    value: ${{steps.properties.outputs.tag}}
  rel:
    description: Release plugin rel
    value: ${{steps.properties.outputs.rel}}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
      if: "!contains(github.event.head_commit.message, '[maven-release-plugin]')"
      with:
        token: ${{ inputs.github-token }}

    - name: Echo commit message
      run: |
        echo "Commit message: ${{ github.event.head_commit.message }}"
        echo "Commit id: ${{ github.event.head_commit.id }}"
      shell: bash

    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: "${{ inputs.java-version }}"
        cache: 'maven'
        server-id: github

    # Cache Maven dependencies
    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-m2

    - name: Restore cache
      id: cache-restore
      uses: actions/cache/restore@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
    # Configure Git
    - name: Set up Git
      run: |
        git config --global user.email "<>"
        git config --global user.name "Release Plugin"
        echo "Build started on $(date)"
      shell: bash
    # Configure Git
    - name: Release-Prepare
      id: release-prepare
      env:
          GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        echo "Building the Service jar"
        mvn -B -Darguments='-Dmaven.javadoc.skip=true' clean initialize release:prepare "${{ inputs.maven-args }}" "${{ inputs.maven-profile }}"
      shell: bash
      # Get Properties for Docker artifact process
    - name: Read Properties
      id: properties
      if: ${{ hashFiles('release.properties') != '' }}
      shell: bash
      run: |
        while IFS= read -r line; do
        if [[ "$line" =~ ^scm.tag= ]]; then
         value=$(echo "$line" | cut -d '=' -f 2)
          echo "tag=$value" >> $GITHUB_OUTPUT
        fi
        if [[ "$line" =~ ^project.rel ]]; then
         value=$(echo "$line" | cut -d '=' -f 2)
          echo "rel=$value" >> $GITHUB_OUTPUT
        fi
        done < release.properties

    - name: Perform Release
      id: perform-release
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      shell: bash
      run: |
        echo "performing release for scm=${{steps.properties.outputs.tag}}"
        mvn -B -Darguments='-Dmaven.javadoc.skip=true' clean initialize release:prepare -Pgithub-actions


    - name: Get Maven Release plugin
      id: getReleaseCommit
      run: |
        echo "releasePluginCommit=$(git rev-list -n 1 ${{ steps.properties.outputs.tag }} | xargs)" >> $GITHUB_OUTPUT
      shell: bash
      if: steps.perform-release.outcome == 'success'
